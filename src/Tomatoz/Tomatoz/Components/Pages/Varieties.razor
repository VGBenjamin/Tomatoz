@page "/varieties"
@using Tomatoz.Shared.DTOs
@using Tomatoz.Shared.Enums
@inject HttpClient Http
@inject NavigationManager Navigation

<PageTitle>Tomato Varieties</PageTitle>

<div class="container-fluid">
    <div class="row">
        <div class="col-md-3">
            <div class="card">
                <div class="card-header">
                    <h5>Search & Filters</h5>
                </div>
                <div class="card-body">
                    <EditForm Model="searchDto" OnValidSubmit="HandleSearch">
                        <div class="mb-3">
                            <label class="form-label">Search</label>
                            <InputText @bind-Value="searchDto.SearchTerm" class="form-control" placeholder="Search varieties..." />
                        </div>
                        
                        <div class="mb-3">
                            <label class="form-label">Growth Type</label>
                            <InputSelect @bind-Value="searchDto.GrowthType" class="form-select">
                                <option value="">All</option>
                                @foreach (var type in Enum.GetValues<TomatoGrowthType>())
                                {
                                    <option value="@type">@type</option>
                                }
                            </InputSelect>
                        </div>
                        
                        <div class="mb-3">
                            <label class="form-label">Color</label>
                            <InputSelect @bind-Value="searchDto.Color" class="form-select">
                                <option value="">All</option>
                                @foreach (var color in Enum.GetValues<TomatoColor>())
                                {
                                    <option value="@color">@color</option>
                                }
                            </InputSelect>
                        </div>
                        
                        <div class="mb-3">
                            <label class="form-label">Shape</label>
                            <InputSelect @bind-Value="searchDto.Shape" class="form-select">
                                <option value="">All</option>
                                @foreach (var shape in Enum.GetValues<TomatoShape>())
                                {
                                    <option value="@shape">@shape</option>
                                }
                            </InputSelect>
                        </div>
                        
                        <button type="submit" class="btn btn-primary w-100">Search</button>
                    </EditForm>
                </div>
            </div>
        </div>
        
        <div class="col-md-9">
            <div class="d-flex justify-content-between align-items-center mb-3">
                <h2>Tomato Varieties (@totalCount)</h2>
                <a href="/varieties/new" class="btn btn-success">Add New Variety</a>
            </div>
            
            @if (isLoading)
            {
                <div class="text-center">
                    <div class="spinner-border" role="status">
                        <span class="visually-hidden">Loading...</span>
                    </div>
                </div>
            }
            else if (varieties?.Any() == true)
            {
                <div class="row">
                    @foreach (var variety in varieties)
                    {
                        <div class="col-md-6 col-lg-4 mb-4">
                            <div class="card h-100">
                                @if (variety.Photos?.Any() == true)
                                {
                                    <img src="@variety.Photos.First().FilePath" class="card-img-top" alt="@variety.CommonName" style="height: 200px; object-fit: cover;" />
                                }
                                else
                                {
                                    <div class="card-img-top bg-light d-flex align-items-center justify-content-center" style="height: 200px;">
                                        <span class="text-muted">No photo</span>
                                    </div>
                                }
                                
                                <div class="card-body">
                                    <h5 class="card-title">@variety.CommonName</h5>
                                    <p class="card-text text-muted">@variety.ScientificName</p>
                                    <div class="mb-2">
                                        <span class="badge bg-primary">@variety.GrowthType</span>
                                        <span class="badge bg-info">@variety.Color</span>
                                        <span class="badge bg-warning">@variety.Shape</span>
                                    </div>
                                    <div class="d-flex justify-content-between align-items-center">
                                        <small class="text-muted">
                                            ‚≠ê @variety.AverageRating.ToString("F1") 
                                            üëÅÔ∏è @variety.ViewCount
                                        </small>
                                        <a href="/varieties/@variety.Id" class="btn btn-sm btn-outline-primary">View Details</a>
                                    </div>
                                </div>
                            </div>
                        </div>
                    }
                </div>
                
                <!-- Pagination -->
                @if (totalPages > 1)
                {
                    <nav aria-label="Varieties pagination">
                        <ul class="pagination justify-content-center">
                            <li class="page-item @(currentPage == 1 ? "disabled" : "")">
                                <button class="page-link" @onclick="() => LoadPage(currentPage - 1)" disabled="@(currentPage == 1)">Previous</button>
                            </li>
                            
                            @for (int i = Math.Max(1, currentPage - 2); i <= Math.Min(totalPages, currentPage + 2); i++)
                            {
                                var page = i;
                                <li class="page-item @(page == currentPage ? "active" : "")">
                                    <button class="page-link" @onclick="() => LoadPage(page)">@(page)</button>
                                </li>
                            }
                            
                            <li class="page-item @(currentPage == totalPages ? "disabled" : "")">
                                <button class="page-link" @onclick="() => LoadPage(currentPage + 1)" disabled="@(currentPage == totalPages)">Next</button>
                            </li>
                        </ul>
                    </nav>
                }
            }
            else
            {
                <div class="text-center text-muted">
                    <h4>No varieties found</h4>
                    <p>Try adjusting your search criteria or <a href="/varieties/new">add a new variety</a>.</p>
                </div>
            }
        </div>
    </div>
</div>

@code {
    private TomatoVarietySearchDto searchDto = new();
    private List<TomatoVarietyDto>? varieties;
    private bool isLoading = true;
    private int totalCount = 0;
    private int currentPage = 1;
    private int totalPages = 0;

    protected override async Task OnInitializedAsync()
    {
        await LoadVarieties();
    }

    private async Task HandleSearch()
    {
        currentPage = 1;
        searchDto.Page = currentPage;
        await LoadVarieties();
    }

    private async Task LoadPage(int page)
    {
        currentPage = page;
        searchDto.Page = page;
        await LoadVarieties();
    }

    private async Task LoadVarieties()
    {
        isLoading = true;
        
        try
        {
            searchDto.Page = currentPage;
            searchDto.PageSize = 12;
            
            var queryString = BuildQueryString();
            var response = await Http.GetFromJsonAsync<PaginatedResultDto<TomatoVarietyDto>>($"/api/v1/tomatovarieties{queryString}");
            
            if (response != null)
            {
                varieties = response.Items;
                totalCount = response.TotalCount;
                totalPages = response.TotalPages;
            }
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error loading varieties: {ex.Message}");
            varieties = new List<TomatoVarietyDto>();
        }
        finally
        {
            isLoading = false;
        }
    }

    private string BuildQueryString()
    {
        var query = new List<string>();
        
        if (!string.IsNullOrWhiteSpace(searchDto.SearchTerm))
            query.Add($"SearchTerm={Uri.EscapeDataString(searchDto.SearchTerm)}");
        
        if (searchDto.GrowthType.HasValue)
            query.Add($"GrowthType={searchDto.GrowthType}");
        
        if (searchDto.Color.HasValue)
            query.Add($"Color={searchDto.Color}");
        
        if (searchDto.Shape.HasValue)
            query.Add($"Shape={searchDto.Shape}");
        
        query.Add($"Page={searchDto.Page}");
        query.Add($"PageSize={searchDto.PageSize}");
        query.Add($"SortBy={searchDto.SortBy}");
        query.Add($"SortDescending={searchDto.SortDescending}");
        
        return query.Any() ? "?" + string.Join("&", query) : "";
    }
}
